// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Commits Flux components to a Git repository and configures a Kubernetes cluster to synchronize with the same Git repository.
 *
 * > **NOTE:** Checkout the GitHub bootstrap guide for a walkthrough over how to use this resource with GitHub.
 *
 * > **NOTE:** A breaking change in the attributes have been made in this resource. Read the guide for information of the changes required.
 *
 * ## Example Usage
 *
 * Get Kubernetes credentials from a kubeconfig file. The current context set in the kubeconfig file will be used by default.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as flux from "@worawat/flux";
 *
 * const _this = new flux.FluxBootstrapGit("this", {path: "clusters/my-cluster"});
 * ```
 *
 * ## Import
 *
 * Existing Flux installations can be imported by passing the namespace where Flux is installed.
 *
 * ```sh
 *  $ pulumi import flux:index/fluxBootstrapGit:FluxBootstrapGit this flux-system
 * ```
 */
export class FluxBootstrapGit extends pulumi.CustomResource {
    /**
     * Get an existing FluxBootstrapGit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FluxBootstrapGitState, opts?: pulumi.CustomResourceOptions): FluxBootstrapGit {
        return new FluxBootstrapGit(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'flux:index/fluxBootstrapGit:FluxBootstrapGit';

    /**
     * Returns true if the given object is an instance of FluxBootstrapGit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FluxBootstrapGit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FluxBootstrapGit.__pulumiType;
    }

    /**
     * The internal cluster domain. Defaults to `cluster.local`
     */
    public readonly clusterDomain!: pulumi.Output<string>;
    /**
     * Toolkit components to include in the install manifests. Defaults to `[source-controller kustomize-controller helm-controller notification-controller]`
     */
    public readonly components!: pulumi.Output<string[]>;
    /**
     * List of extra components to include in the install manifests.
     */
    public readonly componentsExtras!: pulumi.Output<string[] | undefined>;
    /**
     * Kubernetes secret name used for pulling the toolkit images from a private registry.
     */
    public readonly imagePullSecret!: pulumi.Output<string | undefined>;
    /**
     * Interval at which to reconcile from bootstrap repository. Defaults to `1m0s`.
     */
    public readonly interval!: pulumi.Output<string>;
    /**
     * Kustomization to override configuration set by default.
     */
    public readonly kustomizationOverride!: pulumi.Output<string | undefined>;
    /**
     * Log level for toolkit components. Defaults to `info`.
     */
    public readonly logLevel!: pulumi.Output<string>;
    /**
     * The namespace scope for install manifests. Defaults to `flux-system`.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * Deny ingress access to the toolkit controllers from other namespaces using network policies. Defaults to `true`.
     */
    public readonly networkPolicy!: pulumi.Output<boolean>;
    /**
     * Path relative to the repository root, when specified the cluster sync will be scoped to this path.
     */
    public readonly path!: pulumi.Output<string | undefined>;
    /**
     * Configures the GitRepository source to initialize and include Git submodules in the artifact it produces.
     */
    public readonly recurseSubmodules!: pulumi.Output<boolean | undefined>;
    /**
     * Container registry where the toolkit images are published. Defaults to `ghcr.io/fluxcd`.
     */
    public readonly registry!: pulumi.Output<string>;
    /**
     * Git repository files created and managed by the provider.
     */
    public /*out*/ readonly repositoryFiles!: pulumi.Output<{[key: string]: string}>;
    /**
     * Name of the secret the sync credentials can be found in or stored to. Defaults to `flux-system`.
     */
    public readonly secretName!: pulumi.Output<string>;
    /**
     * List of toleration keys used to schedule the components pods onto nodes with matching taints.
     */
    public readonly tolerationKeys!: pulumi.Output<string[] | undefined>;
    /**
     * Flux version. Defaults to `v0.41.2`.
     */
    public readonly version!: pulumi.Output<string>;
    /**
     * If true watch for custom resources in all namespaces. Defaults to `true`.
     */
    public readonly watchAllNamespaces!: pulumi.Output<boolean>;

    /**
     * Create a FluxBootstrapGit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FluxBootstrapGitArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FluxBootstrapGitArgs | FluxBootstrapGitState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FluxBootstrapGitState | undefined;
            resourceInputs["clusterDomain"] = state ? state.clusterDomain : undefined;
            resourceInputs["components"] = state ? state.components : undefined;
            resourceInputs["componentsExtras"] = state ? state.componentsExtras : undefined;
            resourceInputs["imagePullSecret"] = state ? state.imagePullSecret : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["kustomizationOverride"] = state ? state.kustomizationOverride : undefined;
            resourceInputs["logLevel"] = state ? state.logLevel : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["networkPolicy"] = state ? state.networkPolicy : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["recurseSubmodules"] = state ? state.recurseSubmodules : undefined;
            resourceInputs["registry"] = state ? state.registry : undefined;
            resourceInputs["repositoryFiles"] = state ? state.repositoryFiles : undefined;
            resourceInputs["secretName"] = state ? state.secretName : undefined;
            resourceInputs["tolerationKeys"] = state ? state.tolerationKeys : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["watchAllNamespaces"] = state ? state.watchAllNamespaces : undefined;
        } else {
            const args = argsOrState as FluxBootstrapGitArgs | undefined;
            resourceInputs["clusterDomain"] = args ? args.clusterDomain : undefined;
            resourceInputs["components"] = args ? args.components : undefined;
            resourceInputs["componentsExtras"] = args ? args.componentsExtras : undefined;
            resourceInputs["imagePullSecret"] = args ? args.imagePullSecret : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["kustomizationOverride"] = args ? args.kustomizationOverride : undefined;
            resourceInputs["logLevel"] = args ? args.logLevel : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["networkPolicy"] = args ? args.networkPolicy : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["recurseSubmodules"] = args ? args.recurseSubmodules : undefined;
            resourceInputs["registry"] = args ? args.registry : undefined;
            resourceInputs["secretName"] = args ? args.secretName : undefined;
            resourceInputs["tolerationKeys"] = args ? args.tolerationKeys : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["watchAllNamespaces"] = args ? args.watchAllNamespaces : undefined;
            resourceInputs["repositoryFiles"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FluxBootstrapGit.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FluxBootstrapGit resources.
 */
export interface FluxBootstrapGitState {
    /**
     * The internal cluster domain. Defaults to `cluster.local`
     */
    clusterDomain?: pulumi.Input<string>;
    /**
     * Toolkit components to include in the install manifests. Defaults to `[source-controller kustomize-controller helm-controller notification-controller]`
     */
    components?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of extra components to include in the install manifests.
     */
    componentsExtras?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Kubernetes secret name used for pulling the toolkit images from a private registry.
     */
    imagePullSecret?: pulumi.Input<string>;
    /**
     * Interval at which to reconcile from bootstrap repository. Defaults to `1m0s`.
     */
    interval?: pulumi.Input<string>;
    /**
     * Kustomization to override configuration set by default.
     */
    kustomizationOverride?: pulumi.Input<string>;
    /**
     * Log level for toolkit components. Defaults to `info`.
     */
    logLevel?: pulumi.Input<string>;
    /**
     * The namespace scope for install manifests. Defaults to `flux-system`.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Deny ingress access to the toolkit controllers from other namespaces using network policies. Defaults to `true`.
     */
    networkPolicy?: pulumi.Input<boolean>;
    /**
     * Path relative to the repository root, when specified the cluster sync will be scoped to this path.
     */
    path?: pulumi.Input<string>;
    /**
     * Configures the GitRepository source to initialize and include Git submodules in the artifact it produces.
     */
    recurseSubmodules?: pulumi.Input<boolean>;
    /**
     * Container registry where the toolkit images are published. Defaults to `ghcr.io/fluxcd`.
     */
    registry?: pulumi.Input<string>;
    /**
     * Git repository files created and managed by the provider.
     */
    repositoryFiles?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the secret the sync credentials can be found in or stored to. Defaults to `flux-system`.
     */
    secretName?: pulumi.Input<string>;
    /**
     * List of toleration keys used to schedule the components pods onto nodes with matching taints.
     */
    tolerationKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flux version. Defaults to `v0.41.2`.
     */
    version?: pulumi.Input<string>;
    /**
     * If true watch for custom resources in all namespaces. Defaults to `true`.
     */
    watchAllNamespaces?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a FluxBootstrapGit resource.
 */
export interface FluxBootstrapGitArgs {
    /**
     * The internal cluster domain. Defaults to `cluster.local`
     */
    clusterDomain?: pulumi.Input<string>;
    /**
     * Toolkit components to include in the install manifests. Defaults to `[source-controller kustomize-controller helm-controller notification-controller]`
     */
    components?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of extra components to include in the install manifests.
     */
    componentsExtras?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Kubernetes secret name used for pulling the toolkit images from a private registry.
     */
    imagePullSecret?: pulumi.Input<string>;
    /**
     * Interval at which to reconcile from bootstrap repository. Defaults to `1m0s`.
     */
    interval?: pulumi.Input<string>;
    /**
     * Kustomization to override configuration set by default.
     */
    kustomizationOverride?: pulumi.Input<string>;
    /**
     * Log level for toolkit components. Defaults to `info`.
     */
    logLevel?: pulumi.Input<string>;
    /**
     * The namespace scope for install manifests. Defaults to `flux-system`.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Deny ingress access to the toolkit controllers from other namespaces using network policies. Defaults to `true`.
     */
    networkPolicy?: pulumi.Input<boolean>;
    /**
     * Path relative to the repository root, when specified the cluster sync will be scoped to this path.
     */
    path?: pulumi.Input<string>;
    /**
     * Configures the GitRepository source to initialize and include Git submodules in the artifact it produces.
     */
    recurseSubmodules?: pulumi.Input<boolean>;
    /**
     * Container registry where the toolkit images are published. Defaults to `ghcr.io/fluxcd`.
     */
    registry?: pulumi.Input<string>;
    /**
     * Name of the secret the sync credentials can be found in or stored to. Defaults to `flux-system`.
     */
    secretName?: pulumi.Input<string>;
    /**
     * List of toleration keys used to schedule the components pods onto nodes with matching taints.
     */
    tolerationKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flux version. Defaults to `v0.41.2`.
     */
    version?: pulumi.Input<string>;
    /**
     * If true watch for custom resources in all namespaces. Defaults to `true`.
     */
    watchAllNamespaces?: pulumi.Input<boolean>;
}
