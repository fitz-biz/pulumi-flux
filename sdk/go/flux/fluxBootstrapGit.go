// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package flux

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Commits Flux components to a Git repository and configures a Kubernetes cluster to synchronize with the same Git repository.
//
// > **NOTE:** Checkout the GitHub bootstrap guide for a detailed step by step guide.
//
// ## Example Usage
//
// Get Kubernetes credentials from a kubeconfig file. The current context set in the kubeconfig file will be used by default.
//
// ```go
// package main
//
// import (
//
//	"github.com/oun/pulumi-flux/sdk/go/flux"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := flux.NewFluxBootstrapGit(ctx, "this", &flux.FluxBootstrapGitArgs{
//				Path: pulumi.String("clusters/my-cluster"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Existing Flux installations can be imported by passing the namespace where Flux is installed.
//
// ```sh
//
//	$ pulumi import flux:index/fluxBootstrapGit:FluxBootstrapGit this flux-system
//
// ```
type FluxBootstrapGit struct {
	pulumi.CustomResourceState

	// The internal cluster domain. Defaults to `cluster.local`
	ClusterDomain pulumi.StringOutput `pulumi:"clusterDomain"`
	// Toolkit components to include in the install manifests. Defaults to `[source-controller kustomize-controller helm-controller notification-controller]`
	Components pulumi.StringArrayOutput `pulumi:"components"`
	// List of extra components to include in the install manifests.
	ComponentsExtras pulumi.StringArrayOutput `pulumi:"componentsExtras"`
	// Use the existing secret for flux controller and don't create one from bootstrap
	DisableSecretCreation pulumi.BoolPtrOutput `pulumi:"disableSecretCreation"`
	// Kubernetes secret name used for pulling the toolkit images from a private registry.
	ImagePullSecret pulumi.StringPtrOutput `pulumi:"imagePullSecret"`
	// Interval at which to reconcile from bootstrap repository. Defaults to `1m0s`.
	Interval pulumi.StringOutput `pulumi:"interval"`
	// Kustomization to override configuration set by default.
	KustomizationOverride pulumi.StringPtrOutput `pulumi:"kustomizationOverride"`
	// Log level for toolkit components. Defaults to `info`.
	LogLevel pulumi.StringOutput `pulumi:"logLevel"`
	// The namespace scope for install manifests. Defaults to `flux-system`.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// Deny ingress access to the toolkit controllers from other namespaces using network policies. Defaults to `true`.
	NetworkPolicy pulumi.BoolOutput `pulumi:"networkPolicy"`
	// Path relative to the repository root, when specified the cluster sync will be scoped to this path.
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// Configures the GitRepository source to initialize and include Git submodules in the artifact it produces.
	RecurseSubmodules pulumi.BoolPtrOutput `pulumi:"recurseSubmodules"`
	// Container registry where the toolkit images are published. Defaults to `ghcr.io/fluxcd`.
	Registry pulumi.StringOutput `pulumi:"registry"`
	// Git repository files created and managed by the provider.
	RepositoryFiles pulumi.StringMapOutput `pulumi:"repositoryFiles"`
	// Name of the secret the sync credentials can be found in or stored to. Defaults to `flux-system`.
	SecretName pulumi.StringOutput               `pulumi:"secretName"`
	Timeouts   FluxBootstrapGitTimeoutsPtrOutput `pulumi:"timeouts"`
	// List of toleration keys used to schedule the components pods onto nodes with matching taints.
	TolerationKeys pulumi.StringArrayOutput `pulumi:"tolerationKeys"`
	// Flux version. Defaults to `v2.0.1`.
	Version pulumi.StringOutput `pulumi:"version"`
	// If true watch for custom resources in all namespaces. Defaults to `true`.
	WatchAllNamespaces pulumi.BoolOutput `pulumi:"watchAllNamespaces"`
}

// NewFluxBootstrapGit registers a new resource with the given unique name, arguments, and options.
func NewFluxBootstrapGit(ctx *pulumi.Context,
	name string, args *FluxBootstrapGitArgs, opts ...pulumi.ResourceOption) (*FluxBootstrapGit, error) {
	if args == nil {
		args = &FluxBootstrapGitArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource FluxBootstrapGit
	err := ctx.RegisterResource("flux:index/fluxBootstrapGit:FluxBootstrapGit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFluxBootstrapGit gets an existing FluxBootstrapGit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFluxBootstrapGit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FluxBootstrapGitState, opts ...pulumi.ResourceOption) (*FluxBootstrapGit, error) {
	var resource FluxBootstrapGit
	err := ctx.ReadResource("flux:index/fluxBootstrapGit:FluxBootstrapGit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FluxBootstrapGit resources.
type fluxBootstrapGitState struct {
	// The internal cluster domain. Defaults to `cluster.local`
	ClusterDomain *string `pulumi:"clusterDomain"`
	// Toolkit components to include in the install manifests. Defaults to `[source-controller kustomize-controller helm-controller notification-controller]`
	Components []string `pulumi:"components"`
	// List of extra components to include in the install manifests.
	ComponentsExtras []string `pulumi:"componentsExtras"`
	// Use the existing secret for flux controller and don't create one from bootstrap
	DisableSecretCreation *bool `pulumi:"disableSecretCreation"`
	// Kubernetes secret name used for pulling the toolkit images from a private registry.
	ImagePullSecret *string `pulumi:"imagePullSecret"`
	// Interval at which to reconcile from bootstrap repository. Defaults to `1m0s`.
	Interval *string `pulumi:"interval"`
	// Kustomization to override configuration set by default.
	KustomizationOverride *string `pulumi:"kustomizationOverride"`
	// Log level for toolkit components. Defaults to `info`.
	LogLevel *string `pulumi:"logLevel"`
	// The namespace scope for install manifests. Defaults to `flux-system`.
	Namespace *string `pulumi:"namespace"`
	// Deny ingress access to the toolkit controllers from other namespaces using network policies. Defaults to `true`.
	NetworkPolicy *bool `pulumi:"networkPolicy"`
	// Path relative to the repository root, when specified the cluster sync will be scoped to this path.
	Path *string `pulumi:"path"`
	// Configures the GitRepository source to initialize and include Git submodules in the artifact it produces.
	RecurseSubmodules *bool `pulumi:"recurseSubmodules"`
	// Container registry where the toolkit images are published. Defaults to `ghcr.io/fluxcd`.
	Registry *string `pulumi:"registry"`
	// Git repository files created and managed by the provider.
	RepositoryFiles map[string]string `pulumi:"repositoryFiles"`
	// Name of the secret the sync credentials can be found in or stored to. Defaults to `flux-system`.
	SecretName *string                   `pulumi:"secretName"`
	Timeouts   *FluxBootstrapGitTimeouts `pulumi:"timeouts"`
	// List of toleration keys used to schedule the components pods onto nodes with matching taints.
	TolerationKeys []string `pulumi:"tolerationKeys"`
	// Flux version. Defaults to `v2.0.1`.
	Version *string `pulumi:"version"`
	// If true watch for custom resources in all namespaces. Defaults to `true`.
	WatchAllNamespaces *bool `pulumi:"watchAllNamespaces"`
}

type FluxBootstrapGitState struct {
	// The internal cluster domain. Defaults to `cluster.local`
	ClusterDomain pulumi.StringPtrInput
	// Toolkit components to include in the install manifests. Defaults to `[source-controller kustomize-controller helm-controller notification-controller]`
	Components pulumi.StringArrayInput
	// List of extra components to include in the install manifests.
	ComponentsExtras pulumi.StringArrayInput
	// Use the existing secret for flux controller and don't create one from bootstrap
	DisableSecretCreation pulumi.BoolPtrInput
	// Kubernetes secret name used for pulling the toolkit images from a private registry.
	ImagePullSecret pulumi.StringPtrInput
	// Interval at which to reconcile from bootstrap repository. Defaults to `1m0s`.
	Interval pulumi.StringPtrInput
	// Kustomization to override configuration set by default.
	KustomizationOverride pulumi.StringPtrInput
	// Log level for toolkit components. Defaults to `info`.
	LogLevel pulumi.StringPtrInput
	// The namespace scope for install manifests. Defaults to `flux-system`.
	Namespace pulumi.StringPtrInput
	// Deny ingress access to the toolkit controllers from other namespaces using network policies. Defaults to `true`.
	NetworkPolicy pulumi.BoolPtrInput
	// Path relative to the repository root, when specified the cluster sync will be scoped to this path.
	Path pulumi.StringPtrInput
	// Configures the GitRepository source to initialize and include Git submodules in the artifact it produces.
	RecurseSubmodules pulumi.BoolPtrInput
	// Container registry where the toolkit images are published. Defaults to `ghcr.io/fluxcd`.
	Registry pulumi.StringPtrInput
	// Git repository files created and managed by the provider.
	RepositoryFiles pulumi.StringMapInput
	// Name of the secret the sync credentials can be found in or stored to. Defaults to `flux-system`.
	SecretName pulumi.StringPtrInput
	Timeouts   FluxBootstrapGitTimeoutsPtrInput
	// List of toleration keys used to schedule the components pods onto nodes with matching taints.
	TolerationKeys pulumi.StringArrayInput
	// Flux version. Defaults to `v2.0.1`.
	Version pulumi.StringPtrInput
	// If true watch for custom resources in all namespaces. Defaults to `true`.
	WatchAllNamespaces pulumi.BoolPtrInput
}

func (FluxBootstrapGitState) ElementType() reflect.Type {
	return reflect.TypeOf((*fluxBootstrapGitState)(nil)).Elem()
}

type fluxBootstrapGitArgs struct {
	// The internal cluster domain. Defaults to `cluster.local`
	ClusterDomain *string `pulumi:"clusterDomain"`
	// Toolkit components to include in the install manifests. Defaults to `[source-controller kustomize-controller helm-controller notification-controller]`
	Components []string `pulumi:"components"`
	// List of extra components to include in the install manifests.
	ComponentsExtras []string `pulumi:"componentsExtras"`
	// Use the existing secret for flux controller and don't create one from bootstrap
	DisableSecretCreation *bool `pulumi:"disableSecretCreation"`
	// Kubernetes secret name used for pulling the toolkit images from a private registry.
	ImagePullSecret *string `pulumi:"imagePullSecret"`
	// Interval at which to reconcile from bootstrap repository. Defaults to `1m0s`.
	Interval *string `pulumi:"interval"`
	// Kustomization to override configuration set by default.
	KustomizationOverride *string `pulumi:"kustomizationOverride"`
	// Log level for toolkit components. Defaults to `info`.
	LogLevel *string `pulumi:"logLevel"`
	// The namespace scope for install manifests. Defaults to `flux-system`.
	Namespace *string `pulumi:"namespace"`
	// Deny ingress access to the toolkit controllers from other namespaces using network policies. Defaults to `true`.
	NetworkPolicy *bool `pulumi:"networkPolicy"`
	// Path relative to the repository root, when specified the cluster sync will be scoped to this path.
	Path *string `pulumi:"path"`
	// Configures the GitRepository source to initialize and include Git submodules in the artifact it produces.
	RecurseSubmodules *bool `pulumi:"recurseSubmodules"`
	// Container registry where the toolkit images are published. Defaults to `ghcr.io/fluxcd`.
	Registry *string `pulumi:"registry"`
	// Name of the secret the sync credentials can be found in or stored to. Defaults to `flux-system`.
	SecretName *string                   `pulumi:"secretName"`
	Timeouts   *FluxBootstrapGitTimeouts `pulumi:"timeouts"`
	// List of toleration keys used to schedule the components pods onto nodes with matching taints.
	TolerationKeys []string `pulumi:"tolerationKeys"`
	// Flux version. Defaults to `v2.0.1`.
	Version *string `pulumi:"version"`
	// If true watch for custom resources in all namespaces. Defaults to `true`.
	WatchAllNamespaces *bool `pulumi:"watchAllNamespaces"`
}

// The set of arguments for constructing a FluxBootstrapGit resource.
type FluxBootstrapGitArgs struct {
	// The internal cluster domain. Defaults to `cluster.local`
	ClusterDomain pulumi.StringPtrInput
	// Toolkit components to include in the install manifests. Defaults to `[source-controller kustomize-controller helm-controller notification-controller]`
	Components pulumi.StringArrayInput
	// List of extra components to include in the install manifests.
	ComponentsExtras pulumi.StringArrayInput
	// Use the existing secret for flux controller and don't create one from bootstrap
	DisableSecretCreation pulumi.BoolPtrInput
	// Kubernetes secret name used for pulling the toolkit images from a private registry.
	ImagePullSecret pulumi.StringPtrInput
	// Interval at which to reconcile from bootstrap repository. Defaults to `1m0s`.
	Interval pulumi.StringPtrInput
	// Kustomization to override configuration set by default.
	KustomizationOverride pulumi.StringPtrInput
	// Log level for toolkit components. Defaults to `info`.
	LogLevel pulumi.StringPtrInput
	// The namespace scope for install manifests. Defaults to `flux-system`.
	Namespace pulumi.StringPtrInput
	// Deny ingress access to the toolkit controllers from other namespaces using network policies. Defaults to `true`.
	NetworkPolicy pulumi.BoolPtrInput
	// Path relative to the repository root, when specified the cluster sync will be scoped to this path.
	Path pulumi.StringPtrInput
	// Configures the GitRepository source to initialize and include Git submodules in the artifact it produces.
	RecurseSubmodules pulumi.BoolPtrInput
	// Container registry where the toolkit images are published. Defaults to `ghcr.io/fluxcd`.
	Registry pulumi.StringPtrInput
	// Name of the secret the sync credentials can be found in or stored to. Defaults to `flux-system`.
	SecretName pulumi.StringPtrInput
	Timeouts   FluxBootstrapGitTimeoutsPtrInput
	// List of toleration keys used to schedule the components pods onto nodes with matching taints.
	TolerationKeys pulumi.StringArrayInput
	// Flux version. Defaults to `v2.0.1`.
	Version pulumi.StringPtrInput
	// If true watch for custom resources in all namespaces. Defaults to `true`.
	WatchAllNamespaces pulumi.BoolPtrInput
}

func (FluxBootstrapGitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fluxBootstrapGitArgs)(nil)).Elem()
}

type FluxBootstrapGitInput interface {
	pulumi.Input

	ToFluxBootstrapGitOutput() FluxBootstrapGitOutput
	ToFluxBootstrapGitOutputWithContext(ctx context.Context) FluxBootstrapGitOutput
}

func (*FluxBootstrapGit) ElementType() reflect.Type {
	return reflect.TypeOf((**FluxBootstrapGit)(nil)).Elem()
}

func (i *FluxBootstrapGit) ToFluxBootstrapGitOutput() FluxBootstrapGitOutput {
	return i.ToFluxBootstrapGitOutputWithContext(context.Background())
}

func (i *FluxBootstrapGit) ToFluxBootstrapGitOutputWithContext(ctx context.Context) FluxBootstrapGitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FluxBootstrapGitOutput)
}

// FluxBootstrapGitArrayInput is an input type that accepts FluxBootstrapGitArray and FluxBootstrapGitArrayOutput values.
// You can construct a concrete instance of `FluxBootstrapGitArrayInput` via:
//
//	FluxBootstrapGitArray{ FluxBootstrapGitArgs{...} }
type FluxBootstrapGitArrayInput interface {
	pulumi.Input

	ToFluxBootstrapGitArrayOutput() FluxBootstrapGitArrayOutput
	ToFluxBootstrapGitArrayOutputWithContext(context.Context) FluxBootstrapGitArrayOutput
}

type FluxBootstrapGitArray []FluxBootstrapGitInput

func (FluxBootstrapGitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FluxBootstrapGit)(nil)).Elem()
}

func (i FluxBootstrapGitArray) ToFluxBootstrapGitArrayOutput() FluxBootstrapGitArrayOutput {
	return i.ToFluxBootstrapGitArrayOutputWithContext(context.Background())
}

func (i FluxBootstrapGitArray) ToFluxBootstrapGitArrayOutputWithContext(ctx context.Context) FluxBootstrapGitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FluxBootstrapGitArrayOutput)
}

// FluxBootstrapGitMapInput is an input type that accepts FluxBootstrapGitMap and FluxBootstrapGitMapOutput values.
// You can construct a concrete instance of `FluxBootstrapGitMapInput` via:
//
//	FluxBootstrapGitMap{ "key": FluxBootstrapGitArgs{...} }
type FluxBootstrapGitMapInput interface {
	pulumi.Input

	ToFluxBootstrapGitMapOutput() FluxBootstrapGitMapOutput
	ToFluxBootstrapGitMapOutputWithContext(context.Context) FluxBootstrapGitMapOutput
}

type FluxBootstrapGitMap map[string]FluxBootstrapGitInput

func (FluxBootstrapGitMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FluxBootstrapGit)(nil)).Elem()
}

func (i FluxBootstrapGitMap) ToFluxBootstrapGitMapOutput() FluxBootstrapGitMapOutput {
	return i.ToFluxBootstrapGitMapOutputWithContext(context.Background())
}

func (i FluxBootstrapGitMap) ToFluxBootstrapGitMapOutputWithContext(ctx context.Context) FluxBootstrapGitMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FluxBootstrapGitMapOutput)
}

type FluxBootstrapGitOutput struct{ *pulumi.OutputState }

func (FluxBootstrapGitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FluxBootstrapGit)(nil)).Elem()
}

func (o FluxBootstrapGitOutput) ToFluxBootstrapGitOutput() FluxBootstrapGitOutput {
	return o
}

func (o FluxBootstrapGitOutput) ToFluxBootstrapGitOutputWithContext(ctx context.Context) FluxBootstrapGitOutput {
	return o
}

// The internal cluster domain. Defaults to `cluster.local`
func (o FluxBootstrapGitOutput) ClusterDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *FluxBootstrapGit) pulumi.StringOutput { return v.ClusterDomain }).(pulumi.StringOutput)
}

// Toolkit components to include in the install manifests. Defaults to `[source-controller kustomize-controller helm-controller notification-controller]`
func (o FluxBootstrapGitOutput) Components() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FluxBootstrapGit) pulumi.StringArrayOutput { return v.Components }).(pulumi.StringArrayOutput)
}

// List of extra components to include in the install manifests.
func (o FluxBootstrapGitOutput) ComponentsExtras() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FluxBootstrapGit) pulumi.StringArrayOutput { return v.ComponentsExtras }).(pulumi.StringArrayOutput)
}

// Use the existing secret for flux controller and don't create one from bootstrap
func (o FluxBootstrapGitOutput) DisableSecretCreation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FluxBootstrapGit) pulumi.BoolPtrOutput { return v.DisableSecretCreation }).(pulumi.BoolPtrOutput)
}

// Kubernetes secret name used for pulling the toolkit images from a private registry.
func (o FluxBootstrapGitOutput) ImagePullSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FluxBootstrapGit) pulumi.StringPtrOutput { return v.ImagePullSecret }).(pulumi.StringPtrOutput)
}

// Interval at which to reconcile from bootstrap repository. Defaults to `1m0s`.
func (o FluxBootstrapGitOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v *FluxBootstrapGit) pulumi.StringOutput { return v.Interval }).(pulumi.StringOutput)
}

// Kustomization to override configuration set by default.
func (o FluxBootstrapGitOutput) KustomizationOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FluxBootstrapGit) pulumi.StringPtrOutput { return v.KustomizationOverride }).(pulumi.StringPtrOutput)
}

// Log level for toolkit components. Defaults to `info`.
func (o FluxBootstrapGitOutput) LogLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *FluxBootstrapGit) pulumi.StringOutput { return v.LogLevel }).(pulumi.StringOutput)
}

// The namespace scope for install manifests. Defaults to `flux-system`.
func (o FluxBootstrapGitOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *FluxBootstrapGit) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// Deny ingress access to the toolkit controllers from other namespaces using network policies. Defaults to `true`.
func (o FluxBootstrapGitOutput) NetworkPolicy() pulumi.BoolOutput {
	return o.ApplyT(func(v *FluxBootstrapGit) pulumi.BoolOutput { return v.NetworkPolicy }).(pulumi.BoolOutput)
}

// Path relative to the repository root, when specified the cluster sync will be scoped to this path.
func (o FluxBootstrapGitOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FluxBootstrapGit) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

// Configures the GitRepository source to initialize and include Git submodules in the artifact it produces.
func (o FluxBootstrapGitOutput) RecurseSubmodules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FluxBootstrapGit) pulumi.BoolPtrOutput { return v.RecurseSubmodules }).(pulumi.BoolPtrOutput)
}

// Container registry where the toolkit images are published. Defaults to `ghcr.io/fluxcd`.
func (o FluxBootstrapGitOutput) Registry() pulumi.StringOutput {
	return o.ApplyT(func(v *FluxBootstrapGit) pulumi.StringOutput { return v.Registry }).(pulumi.StringOutput)
}

// Git repository files created and managed by the provider.
func (o FluxBootstrapGitOutput) RepositoryFiles() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FluxBootstrapGit) pulumi.StringMapOutput { return v.RepositoryFiles }).(pulumi.StringMapOutput)
}

// Name of the secret the sync credentials can be found in or stored to. Defaults to `flux-system`.
func (o FluxBootstrapGitOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v *FluxBootstrapGit) pulumi.StringOutput { return v.SecretName }).(pulumi.StringOutput)
}

func (o FluxBootstrapGitOutput) Timeouts() FluxBootstrapGitTimeoutsPtrOutput {
	return o.ApplyT(func(v *FluxBootstrapGit) FluxBootstrapGitTimeoutsPtrOutput { return v.Timeouts }).(FluxBootstrapGitTimeoutsPtrOutput)
}

// List of toleration keys used to schedule the components pods onto nodes with matching taints.
func (o FluxBootstrapGitOutput) TolerationKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FluxBootstrapGit) pulumi.StringArrayOutput { return v.TolerationKeys }).(pulumi.StringArrayOutput)
}

// Flux version. Defaults to `v2.0.1`.
func (o FluxBootstrapGitOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *FluxBootstrapGit) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// If true watch for custom resources in all namespaces. Defaults to `true`.
func (o FluxBootstrapGitOutput) WatchAllNamespaces() pulumi.BoolOutput {
	return o.ApplyT(func(v *FluxBootstrapGit) pulumi.BoolOutput { return v.WatchAllNamespaces }).(pulumi.BoolOutput)
}

type FluxBootstrapGitArrayOutput struct{ *pulumi.OutputState }

func (FluxBootstrapGitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FluxBootstrapGit)(nil)).Elem()
}

func (o FluxBootstrapGitArrayOutput) ToFluxBootstrapGitArrayOutput() FluxBootstrapGitArrayOutput {
	return o
}

func (o FluxBootstrapGitArrayOutput) ToFluxBootstrapGitArrayOutputWithContext(ctx context.Context) FluxBootstrapGitArrayOutput {
	return o
}

func (o FluxBootstrapGitArrayOutput) Index(i pulumi.IntInput) FluxBootstrapGitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FluxBootstrapGit {
		return vs[0].([]*FluxBootstrapGit)[vs[1].(int)]
	}).(FluxBootstrapGitOutput)
}

type FluxBootstrapGitMapOutput struct{ *pulumi.OutputState }

func (FluxBootstrapGitMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FluxBootstrapGit)(nil)).Elem()
}

func (o FluxBootstrapGitMapOutput) ToFluxBootstrapGitMapOutput() FluxBootstrapGitMapOutput {
	return o
}

func (o FluxBootstrapGitMapOutput) ToFluxBootstrapGitMapOutputWithContext(ctx context.Context) FluxBootstrapGitMapOutput {
	return o
}

func (o FluxBootstrapGitMapOutput) MapIndex(k pulumi.StringInput) FluxBootstrapGitOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FluxBootstrapGit {
		return vs[0].(map[string]*FluxBootstrapGit)[vs[1].(string)]
	}).(FluxBootstrapGitOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FluxBootstrapGitInput)(nil)).Elem(), &FluxBootstrapGit{})
	pulumi.RegisterInputType(reflect.TypeOf((*FluxBootstrapGitArrayInput)(nil)).Elem(), FluxBootstrapGitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FluxBootstrapGitMapInput)(nil)).Elem(), FluxBootstrapGitMap{})
	pulumi.RegisterOutputType(FluxBootstrapGitOutput{})
	pulumi.RegisterOutputType(FluxBootstrapGitArrayOutput{})
	pulumi.RegisterOutputType(FluxBootstrapGitMapOutput{})
}
