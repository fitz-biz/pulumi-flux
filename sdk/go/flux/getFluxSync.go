// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package flux

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `getFluxSync` can be used to generate manifests for reconciling the specified repository path on the cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/oun/pulumi-flux/sdk/go/flux"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			targetPath := cfg.Require("targetPath")
//			cloneUrl := cfg.Require("cloneUrl")
//			_, err := flux.GetFluxSync(ctx, &flux.GetFluxSyncArgs{
//				TargetPath: targetPath,
//				Url:        cloneUrl,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetFluxSync(ctx *pulumi.Context, args *GetFluxSyncArgs, opts ...pulumi.InvokeOption) (*GetFluxSyncResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetFluxSyncResult
	err := ctx.Invoke("flux:index/getFluxSync:getFluxSync", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFluxSync.
type GetFluxSyncArgs struct {
	// Default branch to sync from. Defaults to `main`.
	Branch *string `pulumi:"branch"`
	// The Git commit SHA to checkout, if specified Tag filters will be ignored.
	Commit *string `pulumi:"commit"`
	// Sync interval in minutes. Defaults to `1`.
	Interval *int `pulumi:"interval"`
	// The kubernetes resources name. Defaults to `flux-system`.
	Name *string `pulumi:"name"`
	// The namespace scope for this operation. Defaults to `flux-system`.
	Namespace *string `pulumi:"namespace"`
	// The names of patches to apply to the Kustomization. Used to generate the `patchFilePaths` output value.
	PatchNames []string `pulumi:"patchNames"`
	// The name of the secret that is referenced by GitRepository as SecretRef. Defaults to `flux-system`.
	Secret *string `pulumi:"secret"`
	// The Git tag semver expression, takes precedence over `tag`.
	Semver *string `pulumi:"semver"`
	// The Git tag to checkout, takes precedence over `branch`.
	Tag *string `pulumi:"tag"`
	// Relative path to the Git repository root where the sync manifests are committed.
	TargetPath string `pulumi:"targetPath"`
	// Git repository clone url.
	Url string `pulumi:"url"`
}

// A collection of values returned by getFluxSync.
type GetFluxSyncResult struct {
	// Default branch to sync from. Defaults to `main`.
	Branch *string `pulumi:"branch"`
	// The Git commit SHA to checkout, if specified Tag filters will be ignored.
	Commit *string `pulumi:"commit"`
	// Manifests in multi-doc yaml format.
	Content string `pulumi:"content"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// Sync interval in minutes. Defaults to `1`.
	Interval *int `pulumi:"interval"`
	// Kustomize yaml document.
	KustomizeContent string `pulumi:"kustomizeContent"`
	// Expected path of kustomize content in git repository.
	KustomizePath string `pulumi:"kustomizePath"`
	// The kubernetes resources name. Defaults to `flux-system`.
	Name *string `pulumi:"name"`
	// The namespace scope for this operation. Defaults to `flux-system`.
	Namespace *string `pulumi:"namespace"`
	// Map of expected paths of kustomize patches in git repository, keyed by the `patchNames` input variable.
	PatchFilePaths map[string]string `pulumi:"patchFilePaths"`
	// The names of patches to apply to the Kustomization. Used to generate the `patchFilePaths` output value.
	PatchNames []string `pulumi:"patchNames"`
	// Expected path of content in git repository.
	Path string `pulumi:"path"`
	// The name of the secret that is referenced by GitRepository as SecretRef. Defaults to `flux-system`.
	Secret *string `pulumi:"secret"`
	// The Git tag semver expression, takes precedence over `tag`.
	Semver *string `pulumi:"semver"`
	// The Git tag to checkout, takes precedence over `branch`.
	Tag *string `pulumi:"tag"`
	// Relative path to the Git repository root where the sync manifests are committed.
	TargetPath string `pulumi:"targetPath"`
	// Git repository clone url.
	Url string `pulumi:"url"`
}

func GetFluxSyncOutput(ctx *pulumi.Context, args GetFluxSyncOutputArgs, opts ...pulumi.InvokeOption) GetFluxSyncResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetFluxSyncResult, error) {
			args := v.(GetFluxSyncArgs)
			r, err := GetFluxSync(ctx, &args, opts...)
			var s GetFluxSyncResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetFluxSyncResultOutput)
}

// A collection of arguments for invoking getFluxSync.
type GetFluxSyncOutputArgs struct {
	// Default branch to sync from. Defaults to `main`.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// The Git commit SHA to checkout, if specified Tag filters will be ignored.
	Commit pulumi.StringPtrInput `pulumi:"commit"`
	// Sync interval in minutes. Defaults to `1`.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// The kubernetes resources name. Defaults to `flux-system`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The namespace scope for this operation. Defaults to `flux-system`.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The names of patches to apply to the Kustomization. Used to generate the `patchFilePaths` output value.
	PatchNames pulumi.StringArrayInput `pulumi:"patchNames"`
	// The name of the secret that is referenced by GitRepository as SecretRef. Defaults to `flux-system`.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// The Git tag semver expression, takes precedence over `tag`.
	Semver pulumi.StringPtrInput `pulumi:"semver"`
	// The Git tag to checkout, takes precedence over `branch`.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// Relative path to the Git repository root where the sync manifests are committed.
	TargetPath pulumi.StringInput `pulumi:"targetPath"`
	// Git repository clone url.
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetFluxSyncOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFluxSyncArgs)(nil)).Elem()
}

// A collection of values returned by getFluxSync.
type GetFluxSyncResultOutput struct{ *pulumi.OutputState }

func (GetFluxSyncResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFluxSyncResult)(nil)).Elem()
}

func (o GetFluxSyncResultOutput) ToGetFluxSyncResultOutput() GetFluxSyncResultOutput {
	return o
}

func (o GetFluxSyncResultOutput) ToGetFluxSyncResultOutputWithContext(ctx context.Context) GetFluxSyncResultOutput {
	return o
}

// Default branch to sync from. Defaults to `main`.
func (o GetFluxSyncResultOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFluxSyncResult) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The Git commit SHA to checkout, if specified Tag filters will be ignored.
func (o GetFluxSyncResultOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFluxSyncResult) *string { return v.Commit }).(pulumi.StringPtrOutput)
}

// Manifests in multi-doc yaml format.
func (o GetFluxSyncResultOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v GetFluxSyncResult) string { return v.Content }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o GetFluxSyncResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFluxSyncResult) string { return v.Id }).(pulumi.StringOutput)
}

// Sync interval in minutes. Defaults to `1`.
func (o GetFluxSyncResultOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetFluxSyncResult) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// Kustomize yaml document.
func (o GetFluxSyncResultOutput) KustomizeContent() pulumi.StringOutput {
	return o.ApplyT(func(v GetFluxSyncResult) string { return v.KustomizeContent }).(pulumi.StringOutput)
}

// Expected path of kustomize content in git repository.
func (o GetFluxSyncResultOutput) KustomizePath() pulumi.StringOutput {
	return o.ApplyT(func(v GetFluxSyncResult) string { return v.KustomizePath }).(pulumi.StringOutput)
}

// The kubernetes resources name. Defaults to `flux-system`.
func (o GetFluxSyncResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFluxSyncResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace scope for this operation. Defaults to `flux-system`.
func (o GetFluxSyncResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFluxSyncResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Map of expected paths of kustomize patches in git repository, keyed by the `patchNames` input variable.
func (o GetFluxSyncResultOutput) PatchFilePaths() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetFluxSyncResult) map[string]string { return v.PatchFilePaths }).(pulumi.StringMapOutput)
}

// The names of patches to apply to the Kustomization. Used to generate the `patchFilePaths` output value.
func (o GetFluxSyncResultOutput) PatchNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFluxSyncResult) []string { return v.PatchNames }).(pulumi.StringArrayOutput)
}

// Expected path of content in git repository.
func (o GetFluxSyncResultOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetFluxSyncResult) string { return v.Path }).(pulumi.StringOutput)
}

// The name of the secret that is referenced by GitRepository as SecretRef. Defaults to `flux-system`.
func (o GetFluxSyncResultOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFluxSyncResult) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// The Git tag semver expression, takes precedence over `tag`.
func (o GetFluxSyncResultOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFluxSyncResult) *string { return v.Semver }).(pulumi.StringPtrOutput)
}

// The Git tag to checkout, takes precedence over `branch`.
func (o GetFluxSyncResultOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFluxSyncResult) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// Relative path to the Git repository root where the sync manifests are committed.
func (o GetFluxSyncResultOutput) TargetPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetFluxSyncResult) string { return v.TargetPath }).(pulumi.StringOutput)
}

// Git repository clone url.
func (o GetFluxSyncResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetFluxSyncResult) string { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFluxSyncResultOutput{})
}
