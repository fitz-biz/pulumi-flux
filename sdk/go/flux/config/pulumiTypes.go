// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Git struct {
	AuthorEmail           *string  `pulumi:"authorEmail"`
	AuthorName            *string  `pulumi:"authorName"`
	Branch                *string  `pulumi:"branch"`
	CommitMessageAppendix *string  `pulumi:"commitMessageAppendix"`
	GpgKeyId              *string  `pulumi:"gpgKeyId"`
	GpgKeyRing            *string  `pulumi:"gpgKeyRing"`
	GpgPassphrase         *string  `pulumi:"gpgPassphrase"`
	Http                  *GitHttp `pulumi:"http"`
	Ssh                   *GitSsh  `pulumi:"ssh"`
	Url                   string   `pulumi:"url"`
}

// GitInput is an input type that accepts GitArgs and GitOutput values.
// You can construct a concrete instance of `GitInput` via:
//
//	GitArgs{...}
type GitInput interface {
	pulumi.Input

	ToGitOutput() GitOutput
	ToGitOutputWithContext(context.Context) GitOutput
}

type GitArgs struct {
	AuthorEmail           pulumi.StringPtrInput `pulumi:"authorEmail"`
	AuthorName            pulumi.StringPtrInput `pulumi:"authorName"`
	Branch                pulumi.StringPtrInput `pulumi:"branch"`
	CommitMessageAppendix pulumi.StringPtrInput `pulumi:"commitMessageAppendix"`
	GpgKeyId              pulumi.StringPtrInput `pulumi:"gpgKeyId"`
	GpgKeyRing            pulumi.StringPtrInput `pulumi:"gpgKeyRing"`
	GpgPassphrase         pulumi.StringPtrInput `pulumi:"gpgPassphrase"`
	Http                  GitHttpPtrInput       `pulumi:"http"`
	Ssh                   GitSshPtrInput        `pulumi:"ssh"`
	Url                   pulumi.StringInput    `pulumi:"url"`
}

func (GitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Git)(nil)).Elem()
}

func (i GitArgs) ToGitOutput() GitOutput {
	return i.ToGitOutputWithContext(context.Background())
}

func (i GitArgs) ToGitOutputWithContext(ctx context.Context) GitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOutput)
}

type GitOutput struct{ *pulumi.OutputState }

func (GitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Git)(nil)).Elem()
}

func (o GitOutput) ToGitOutput() GitOutput {
	return o
}

func (o GitOutput) ToGitOutputWithContext(ctx context.Context) GitOutput {
	return o
}

func (o GitOutput) AuthorEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Git) *string { return v.AuthorEmail }).(pulumi.StringPtrOutput)
}

func (o GitOutput) AuthorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Git) *string { return v.AuthorName }).(pulumi.StringPtrOutput)
}

func (o GitOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Git) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

func (o GitOutput) CommitMessageAppendix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Git) *string { return v.CommitMessageAppendix }).(pulumi.StringPtrOutput)
}

func (o GitOutput) GpgKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Git) *string { return v.GpgKeyId }).(pulumi.StringPtrOutput)
}

func (o GitOutput) GpgKeyRing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Git) *string { return v.GpgKeyRing }).(pulumi.StringPtrOutput)
}

func (o GitOutput) GpgPassphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Git) *string { return v.GpgPassphrase }).(pulumi.StringPtrOutput)
}

func (o GitOutput) Http() GitHttpPtrOutput {
	return o.ApplyT(func(v Git) *GitHttp { return v.Http }).(GitHttpPtrOutput)
}

func (o GitOutput) Ssh() GitSshPtrOutput {
	return o.ApplyT(func(v Git) *GitSsh { return v.Ssh }).(GitSshPtrOutput)
}

func (o GitOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v Git) string { return v.Url }).(pulumi.StringOutput)
}

type GitHttp struct {
	AllowInsecureHttp    *bool   `pulumi:"allowInsecureHttp"`
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	Password             *string `pulumi:"password"`
	Username             *string `pulumi:"username"`
}

// GitHttpInput is an input type that accepts GitHttpArgs and GitHttpOutput values.
// You can construct a concrete instance of `GitHttpInput` via:
//
//	GitHttpArgs{...}
type GitHttpInput interface {
	pulumi.Input

	ToGitHttpOutput() GitHttpOutput
	ToGitHttpOutputWithContext(context.Context) GitHttpOutput
}

type GitHttpArgs struct {
	AllowInsecureHttp    pulumi.BoolPtrInput   `pulumi:"allowInsecureHttp"`
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	Password             pulumi.StringPtrInput `pulumi:"password"`
	Username             pulumi.StringPtrInput `pulumi:"username"`
}

func (GitHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHttp)(nil)).Elem()
}

func (i GitHttpArgs) ToGitHttpOutput() GitHttpOutput {
	return i.ToGitHttpOutputWithContext(context.Background())
}

func (i GitHttpArgs) ToGitHttpOutputWithContext(ctx context.Context) GitHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHttpOutput)
}

func (i GitHttpArgs) ToGitHttpPtrOutput() GitHttpPtrOutput {
	return i.ToGitHttpPtrOutputWithContext(context.Background())
}

func (i GitHttpArgs) ToGitHttpPtrOutputWithContext(ctx context.Context) GitHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHttpOutput).ToGitHttpPtrOutputWithContext(ctx)
}

// GitHttpPtrInput is an input type that accepts GitHttpArgs, GitHttpPtr and GitHttpPtrOutput values.
// You can construct a concrete instance of `GitHttpPtrInput` via:
//
//	        GitHttpArgs{...}
//
//	or:
//
//	        nil
type GitHttpPtrInput interface {
	pulumi.Input

	ToGitHttpPtrOutput() GitHttpPtrOutput
	ToGitHttpPtrOutputWithContext(context.Context) GitHttpPtrOutput
}

type gitHttpPtrType GitHttpArgs

func GitHttpPtr(v *GitHttpArgs) GitHttpPtrInput {
	return (*gitHttpPtrType)(v)
}

func (*gitHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHttp)(nil)).Elem()
}

func (i *gitHttpPtrType) ToGitHttpPtrOutput() GitHttpPtrOutput {
	return i.ToGitHttpPtrOutputWithContext(context.Background())
}

func (i *gitHttpPtrType) ToGitHttpPtrOutputWithContext(ctx context.Context) GitHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHttpPtrOutput)
}

type GitHttpOutput struct{ *pulumi.OutputState }

func (GitHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHttp)(nil)).Elem()
}

func (o GitHttpOutput) ToGitHttpOutput() GitHttpOutput {
	return o
}

func (o GitHttpOutput) ToGitHttpOutputWithContext(ctx context.Context) GitHttpOutput {
	return o
}

func (o GitHttpOutput) ToGitHttpPtrOutput() GitHttpPtrOutput {
	return o.ToGitHttpPtrOutputWithContext(context.Background())
}

func (o GitHttpOutput) ToGitHttpPtrOutputWithContext(ctx context.Context) GitHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitHttp) *GitHttp {
		return &v
	}).(GitHttpPtrOutput)
}

func (o GitHttpOutput) AllowInsecureHttp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GitHttp) *bool { return v.AllowInsecureHttp }).(pulumi.BoolPtrOutput)
}

func (o GitHttpOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHttp) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

func (o GitHttpOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHttp) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o GitHttpOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHttp) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GitHttpPtrOutput struct{ *pulumi.OutputState }

func (GitHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHttp)(nil)).Elem()
}

func (o GitHttpPtrOutput) ToGitHttpPtrOutput() GitHttpPtrOutput {
	return o
}

func (o GitHttpPtrOutput) ToGitHttpPtrOutputWithContext(ctx context.Context) GitHttpPtrOutput {
	return o
}

func (o GitHttpPtrOutput) Elem() GitHttpOutput {
	return o.ApplyT(func(v *GitHttp) GitHttp {
		if v != nil {
			return *v
		}
		var ret GitHttp
		return ret
	}).(GitHttpOutput)
}

func (o GitHttpPtrOutput) AllowInsecureHttp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitHttp) *bool {
		if v == nil {
			return nil
		}
		return v.AllowInsecureHttp
	}).(pulumi.BoolPtrOutput)
}

func (o GitHttpPtrOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHttp) *string {
		if v == nil {
			return nil
		}
		return v.CertificateAuthority
	}).(pulumi.StringPtrOutput)
}

func (o GitHttpPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHttp) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

func (o GitHttpPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHttp) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type GitSsh struct {
	Password   *string `pulumi:"password"`
	PrivateKey *string `pulumi:"privateKey"`
	Username   *string `pulumi:"username"`
}

// GitSshInput is an input type that accepts GitSshArgs and GitSshOutput values.
// You can construct a concrete instance of `GitSshInput` via:
//
//	GitSshArgs{...}
type GitSshInput interface {
	pulumi.Input

	ToGitSshOutput() GitSshOutput
	ToGitSshOutputWithContext(context.Context) GitSshOutput
}

type GitSshArgs struct {
	Password   pulumi.StringPtrInput `pulumi:"password"`
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	Username   pulumi.StringPtrInput `pulumi:"username"`
}

func (GitSshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitSsh)(nil)).Elem()
}

func (i GitSshArgs) ToGitSshOutput() GitSshOutput {
	return i.ToGitSshOutputWithContext(context.Background())
}

func (i GitSshArgs) ToGitSshOutputWithContext(ctx context.Context) GitSshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitSshOutput)
}

func (i GitSshArgs) ToGitSshPtrOutput() GitSshPtrOutput {
	return i.ToGitSshPtrOutputWithContext(context.Background())
}

func (i GitSshArgs) ToGitSshPtrOutputWithContext(ctx context.Context) GitSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitSshOutput).ToGitSshPtrOutputWithContext(ctx)
}

// GitSshPtrInput is an input type that accepts GitSshArgs, GitSshPtr and GitSshPtrOutput values.
// You can construct a concrete instance of `GitSshPtrInput` via:
//
//	        GitSshArgs{...}
//
//	or:
//
//	        nil
type GitSshPtrInput interface {
	pulumi.Input

	ToGitSshPtrOutput() GitSshPtrOutput
	ToGitSshPtrOutputWithContext(context.Context) GitSshPtrOutput
}

type gitSshPtrType GitSshArgs

func GitSshPtr(v *GitSshArgs) GitSshPtrInput {
	return (*gitSshPtrType)(v)
}

func (*gitSshPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitSsh)(nil)).Elem()
}

func (i *gitSshPtrType) ToGitSshPtrOutput() GitSshPtrOutput {
	return i.ToGitSshPtrOutputWithContext(context.Background())
}

func (i *gitSshPtrType) ToGitSshPtrOutputWithContext(ctx context.Context) GitSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitSshPtrOutput)
}

type GitSshOutput struct{ *pulumi.OutputState }

func (GitSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitSsh)(nil)).Elem()
}

func (o GitSshOutput) ToGitSshOutput() GitSshOutput {
	return o
}

func (o GitSshOutput) ToGitSshOutputWithContext(ctx context.Context) GitSshOutput {
	return o
}

func (o GitSshOutput) ToGitSshPtrOutput() GitSshPtrOutput {
	return o.ToGitSshPtrOutputWithContext(context.Background())
}

func (o GitSshOutput) ToGitSshPtrOutputWithContext(ctx context.Context) GitSshPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitSsh) *GitSsh {
		return &v
	}).(GitSshPtrOutput)
}

func (o GitSshOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitSsh) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o GitSshOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitSsh) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

func (o GitSshOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitSsh) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GitSshPtrOutput struct{ *pulumi.OutputState }

func (GitSshPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitSsh)(nil)).Elem()
}

func (o GitSshPtrOutput) ToGitSshPtrOutput() GitSshPtrOutput {
	return o
}

func (o GitSshPtrOutput) ToGitSshPtrOutputWithContext(ctx context.Context) GitSshPtrOutput {
	return o
}

func (o GitSshPtrOutput) Elem() GitSshOutput {
	return o.ApplyT(func(v *GitSsh) GitSsh {
		if v != nil {
			return *v
		}
		var ret GitSsh
		return ret
	}).(GitSshOutput)
}

func (o GitSshPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitSsh) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

func (o GitSshPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitSsh) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

func (o GitSshPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitSsh) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type Kubernetes struct {
	ClientCertificate     *string  `pulumi:"clientCertificate"`
	ClientKey             *string  `pulumi:"clientKey"`
	ClusterCaCertificate  *string  `pulumi:"clusterCaCertificate"`
	ConfigContext         *string  `pulumi:"configContext"`
	ConfigContextAuthInfo *string  `pulumi:"configContextAuthInfo"`
	ConfigContextCluster  *string  `pulumi:"configContextCluster"`
	ConfigPath            *string  `pulumi:"configPath"`
	ConfigPaths           []string `pulumi:"configPaths"`
	Host                  *string  `pulumi:"host"`
	Insecure              *bool    `pulumi:"insecure"`
	Password              *string  `pulumi:"password"`
	ProxyUrl              *string  `pulumi:"proxyUrl"`
	Token                 *string  `pulumi:"token"`
	Username              *string  `pulumi:"username"`
}

// KubernetesInput is an input type that accepts KubernetesArgs and KubernetesOutput values.
// You can construct a concrete instance of `KubernetesInput` via:
//
//	KubernetesArgs{...}
type KubernetesInput interface {
	pulumi.Input

	ToKubernetesOutput() KubernetesOutput
	ToKubernetesOutputWithContext(context.Context) KubernetesOutput
}

type KubernetesArgs struct {
	ClientCertificate     pulumi.StringPtrInput   `pulumi:"clientCertificate"`
	ClientKey             pulumi.StringPtrInput   `pulumi:"clientKey"`
	ClusterCaCertificate  pulumi.StringPtrInput   `pulumi:"clusterCaCertificate"`
	ConfigContext         pulumi.StringPtrInput   `pulumi:"configContext"`
	ConfigContextAuthInfo pulumi.StringPtrInput   `pulumi:"configContextAuthInfo"`
	ConfigContextCluster  pulumi.StringPtrInput   `pulumi:"configContextCluster"`
	ConfigPath            pulumi.StringPtrInput   `pulumi:"configPath"`
	ConfigPaths           pulumi.StringArrayInput `pulumi:"configPaths"`
	Host                  pulumi.StringPtrInput   `pulumi:"host"`
	Insecure              pulumi.BoolPtrInput     `pulumi:"insecure"`
	Password              pulumi.StringPtrInput   `pulumi:"password"`
	ProxyUrl              pulumi.StringPtrInput   `pulumi:"proxyUrl"`
	Token                 pulumi.StringPtrInput   `pulumi:"token"`
	Username              pulumi.StringPtrInput   `pulumi:"username"`
}

func (KubernetesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Kubernetes)(nil)).Elem()
}

func (i KubernetesArgs) ToKubernetesOutput() KubernetesOutput {
	return i.ToKubernetesOutputWithContext(context.Background())
}

func (i KubernetesArgs) ToKubernetesOutputWithContext(ctx context.Context) KubernetesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesOutput)
}

type KubernetesOutput struct{ *pulumi.OutputState }

func (KubernetesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Kubernetes)(nil)).Elem()
}

func (o KubernetesOutput) ToKubernetesOutput() KubernetesOutput {
	return o
}

func (o KubernetesOutput) ToKubernetesOutputWithContext(ctx context.Context) KubernetesOutput {
	return o
}

func (o KubernetesOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Kubernetes) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

func (o KubernetesOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Kubernetes) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

func (o KubernetesOutput) ClusterCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Kubernetes) *string { return v.ClusterCaCertificate }).(pulumi.StringPtrOutput)
}

func (o KubernetesOutput) ConfigContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Kubernetes) *string { return v.ConfigContext }).(pulumi.StringPtrOutput)
}

func (o KubernetesOutput) ConfigContextAuthInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Kubernetes) *string { return v.ConfigContextAuthInfo }).(pulumi.StringPtrOutput)
}

func (o KubernetesOutput) ConfigContextCluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Kubernetes) *string { return v.ConfigContextCluster }).(pulumi.StringPtrOutput)
}

func (o KubernetesOutput) ConfigPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Kubernetes) *string { return v.ConfigPath }).(pulumi.StringPtrOutput)
}

func (o KubernetesOutput) ConfigPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Kubernetes) []string { return v.ConfigPaths }).(pulumi.StringArrayOutput)
}

func (o KubernetesOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Kubernetes) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o KubernetesOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Kubernetes) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

func (o KubernetesOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Kubernetes) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o KubernetesOutput) ProxyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Kubernetes) *string { return v.ProxyUrl }).(pulumi.StringPtrOutput)
}

func (o KubernetesOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Kubernetes) *string { return v.Token }).(pulumi.StringPtrOutput)
}

func (o KubernetesOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Kubernetes) *string { return v.Username }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitInput)(nil)).Elem(), GitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitHttpInput)(nil)).Elem(), GitHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitHttpPtrInput)(nil)).Elem(), GitHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitSshInput)(nil)).Elem(), GitSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitSshPtrInput)(nil)).Elem(), GitSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesInput)(nil)).Elem(), KubernetesArgs{})
	pulumi.RegisterOutputType(GitOutput{})
	pulumi.RegisterOutputType(GitHttpOutput{})
	pulumi.RegisterOutputType(GitHttpPtrOutput{})
	pulumi.RegisterOutputType(GitSshOutput{})
	pulumi.RegisterOutputType(GitSshPtrOutput{})
	pulumi.RegisterOutputType(KubernetesOutput{})
}
